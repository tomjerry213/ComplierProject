0 A  0 -1 0
1 < A 0 -1 1
2 1 A 0 1 0
3 6 1 2 1 1
4 , 16 2 1 1
16 16
5   16 2 1 0
6 3 16 2 1 0
7 2 3 2 1 1
8 > 32 2 1 1
32 32
9 [ 32 2 1 0
10 i 32 2 2 0
11 , i 0 2 1
12   i 0 2 0
13 j i 0 2 0
14 ] j 0 2 1
15   j 0 0 0
16 = j 0 0 0
17   j 0 0 0
18 A j 0 0 0
19 < A 0 0 1
20 1 A 0 1 0
21 6 1 2 1 1
22 , 16 2 1 1
16 16
23   16 2 1 0
24 3 16 2 1 0
25 2 3 2 1 1
26 > 32 2 1 1
32 32
27 [ 32 2 1 0
28 i 32 2 2 0
29 , i 0 2 1
30   i 0 2 0
31 j i 0 2 0
32 ] j 0 2 1
33   j 0 0 0
34 + j 0 0 0
35   j 0 0 0
36 a j 0 0 0
37 l a 0 0 1
38 p al 0 0 1
39 h alp 0 0 1
40 a alph 0 0 1
41 < alpha 0 0 1
42 1 alpha 0 1 0
43 > 1 2 1 1
1 1
44   1 2 1 0
45 * 1 2 1 0
46   1 2 1 0
47 ( 1 2 1 0
48 B 1 2 1 0
49 < B 0 1 1
50 1 B 0 1 0
51 6 1 2 1 1
52 , 16 2 1 1
16 16
53   16 2 1 0
54 3 16 2 1 0
55 2 3 2 1 1
56 > 32 2 1 1
32 32
57 [ 32 2 1 0
58 i 32 2 2 0
59 , i 0 2 1
60   i 0 2 0
61 k i 0 2 0
62 ] k 0 2 1
63   k 0 0 0
64 * k 0 0 0
65   k 0 0 0
66 C k 0 0 0
67 < C 0 0 1
68 3 C 0 1 0
69 2 3 2 1 1
70 , 32 2 1 1
32 32
71   32 2 1 0
72 3 32 2 1 0
73 2 3 2 1 1
74 > 32 2 1 1
32 32
75 [ 32 2 1 0
76 k 32 2 2 0
77 , k 0 2 1
78   k 0 2 0
79 j k 0 2 0
80 ] j 0 2 1
81 ) j 0 0 0
82 ; j 0 0 0
83   j 0 0 0
84 A j 0 0 0
85 < A 0 0 1
86 1 A 0 1 0
87 6 1 2 1 1
88 , 16 2 1 1
16 16
89   16 2 1 0
90 3 16 2 1 0
91 2 3 2 1 1
92 > 32 2 1 1
32 32
93 [ 32 2 1 0
94 i 32 2 2 0
95 , i 0 2 1
96   i 0 2 0
97 j i 0 2 0
98 ] j 0 2 1
99   j 0 0 0
100 = j 0 0 0
101   j 0 0 0
102 A j 0 0 0
103 < A 0 0 1
104 1 A 0 1 0
105 6 1 2 1 1
106 , 16 2 1 1
16 16
107   16 2 1 0
108 3 16 2 1 0
109 2 3 2 1 1
110 > 32 2 1 1
32 32
111 [ 32 2 1 0
112 i 32 2 2 0
113 , i 0 2 1
114   i 0 2 0
115 j i 0 2 0
116 ] j 0 2 1
117   j 0 0 0
118 + j 0 0 0
119   j 0 0 0
120 b j 0 0 0
121 e b 0 0 1
122 t be 0 0 1
123 a bet 0 0 1
124 < beta 0 0 1
125 1 beta 0 1 0
126 > 1 2 1 1
1 1
127   1 2 1 0
128 * 1 2 1 0
129   1 2 1 0
130 D 1 2 1 0
131 < D 0 1 1
132 1 D 0 1 0
133 6 1 2 1 1
134 , 16 2 1 1
16 16
135   16 2 1 0
136 3 16 2 1 0
137 2 3 2 1 1
138 > 32 2 1 1
32 32
139 [ 32 2 1 0
140 i 32 2 2 0
141 , i 0 2 1
142   i 0 2 0
143 j i 0 2 0
144 ] j 0 2 1
145 ; j 0 0 0
A<16,32>[i,j]=A<16,32>[i,j]+alpha<1>*(B<16,32>[i,k]*C<32,32>[k,j]);
A<16,32>[i,j]=A<16,32>[i,j]+beta<1>*D<16,32>[i,j];
16
32
16
32
16
32
32
32
16
32
16
32
16
32
#include "../run.h"

void kernel_case5(int (&B)[16][32], int (&C)[32][32], int (&D)[16][32], int &alpha, int &beta, int (&A)[16][32]) {
for(int i = 0; i < 16; ++i)){
  for(int j = 0; j < 32; ++j)){
    for(int k = 0; k < 32; ++k)){
      if (j < 32) {
        if (k < 32) {
          if (k < 32) {
            if (i < 16) {
              if (j < 32) {
                if (i < 16) {
                  if (j < 32) {
                    if (i < 16) {
                      A[i][j] = A[i][j] + alpha * B[i][k] * C[k][j];
                    } else {
                    }
                  } else {
                  }
                } else {
                }
              } else {
              }
            } else {
            }
          } else {
          }
        } else {
        }
      } else {
      }
    }
  }
}
for(int i = 0; i < 16; ++i)){
  for(int j = 0; j < 32; ++j)){
    if (j < 32) {
      if (i < 16) {
        if (j < 32) {
          if (i < 16) {
            if (j < 32) {
              if (i < 16) {
                if (j < 32) {
                  if (k < 32) {
                    if (k < 32) {
                      if (i < 16) {
                        if (j < 32) {
                          if (i < 16) {
                            if (j < 32) {
                              if (i < 16) {
                                A[i][j] = A[i][j] + beta * D[i][j];
                              } else {
                              }
                            } else {
                            }
                          } else {
                          }
                        } else {
                        }
                      } else {
                      }
                    } else {
                    }
                  } else {
                  }
                } else {
                }
              } else {
              }
            } else {
            }
          } else {
          }
        } else {
        }
      } else {
      }
    } else {
    }
  }
}
}

